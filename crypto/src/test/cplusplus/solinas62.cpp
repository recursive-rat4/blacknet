/*
 * Copyright (c) 2024 Pavel Vasin
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#include <boost/test/unit_test.hpp>
#include <tuple>

#include "latticefold.h"
#include "solinas62.h"
#include "solinas62field.h"

using namespace blacknet::crypto;

BOOST_AUTO_TEST_SUITE(Solinas62)

using Zq = Solinas62Ring;
using Fe2 = Solinas62RingDegree2;
using Fe3 = Solinas62RingDegree3;
using Fe4 = Solinas62RingDegree4;
using Rq = LatticeFold<Solinas62Ring>::Rq;
using RqIso = LatticeFold<Solinas62Ring>::RqIso;
using Rs = std::tuple<Rq, RqIso>;

BOOST_AUTO_TEST_CASE(ZqHex) {
    constexpr Zq a("396a250883366674");
    constexpr Zq b("123c53eebb61ea24");
    Zq c(0x396a250883366674);
    Zq d(0x123c53eebb61ea24);
    BOOST_TEST(c == a);
    BOOST_TEST(d == b);
}

BOOST_AUTO_TEST_CASE(ZqAdd) {
    Zq a(1152921504606846974);
    Zq b(1152921504606846970);
    Zq c(-2305843009213693673);
    BOOST_TEST(c == a + b);
    BOOST_TEST(c == b + a);
    BOOST_TEST(c == Zq(0) + c);
    BOOST_TEST(c == c + Zq(0));
    BOOST_TEST(Zq(1) == Zq(1) + Zq(0));
    BOOST_TEST(Zq(1) == Zq(0) + Zq(1));
    BOOST_TEST(Zq(0) == Zq(-1) + Zq(1));
}

BOOST_AUTO_TEST_CASE(ZqDbl) {
    Zq a(1785355035602804987);
    Zq b(-1040975947221777643);
    BOOST_TEST(b == a.douple());
    BOOST_TEST(Zq(0) == Zq(0).douple());
}

BOOST_AUTO_TEST_CASE(ZqMul) {
    Zq a(1152102451225612864);
    Zq b(-32);
    Zq c(26209708199489288);
    BOOST_TEST(c == a * b);
    BOOST_TEST(c == b * a);
    BOOST_TEST(Zq(0) == Zq(0) * c);
    BOOST_TEST(Zq(0) == c * Zq(0));
    BOOST_TEST(c == c * Zq(1));
    BOOST_TEST(c == Zq(1) * c);
}

BOOST_AUTO_TEST_CASE(ZqSqr) {
    Zq a(801619525837393032);
    Zq b(1446473281281560723);
    BOOST_TEST(b == a.square());
    BOOST_TEST(Zq(0) == Zq(0).square());
    BOOST_TEST(Zq(1) == Zq(1).square());
}

BOOST_AUTO_TEST_CASE(ZqSub) {
    Zq a(-2048);
    Zq b(65536);
    Zq c(-67584);
    Zq d(67584);
    BOOST_TEST(c == a - b);
    BOOST_TEST(d == b - a);
    BOOST_TEST(c == c - Zq(0));
    BOOST_TEST(Zq(0) == Zq(0) - Zq(0));
    BOOST_TEST(Zq(0) == Zq(1) - Zq(1));
}

BOOST_AUTO_TEST_CASE(ZqInv) {
    Zq a(24);
    Zq b(1345075088707988055);
    Zq c(-25);
    Zq d(553402322211286514);
    BOOST_TEST(a == b.invert().value());
    BOOST_TEST(b == a.invert().value());
    BOOST_TEST(c == d.invert().value());
    BOOST_TEST(d == c.invert().value());
    BOOST_TEST(!Zq(0).invert());
}

BOOST_AUTO_TEST_CASE(ZqNeg) {
    Zq a(2074288846126676962);
    Zq b(-2074288846126676962);
    Zq c(-991508920070012190);
    Zq d(991508920070012190);
    BOOST_TEST(b == -a);
    BOOST_TEST(d == -c);
    BOOST_TEST(Zq(0) == -Zq(0));
    BOOST_TEST(Zq(1) == -(-Zq(1)));
}

BOOST_AUTO_TEST_CASE(Fe2Add) {
    Fe2 a({791265566874146615, -157309583225685341});
    Fe2 b({1904858930168201936, -1702068201505429687});
    Fe2 c({2696124497042348551, -1859377784731115028});
    BOOST_TEST(c == a + b);
    BOOST_TEST(c == b + a);
    BOOST_TEST(c == Fe2::LEFT_ADDITIVE_IDENTITY() + c);
    BOOST_TEST(c == c + Fe2::LEFT_ADDITIVE_IDENTITY());
    BOOST_TEST(Fe2::LEFT_MULTIPLICATIVE_IDENTITY() == Fe2::LEFT_MULTIPLICATIVE_IDENTITY() + Fe2::LEFT_ADDITIVE_IDENTITY());
    BOOST_TEST(Fe2::LEFT_MULTIPLICATIVE_IDENTITY() == Fe2::LEFT_ADDITIVE_IDENTITY() + Fe2::LEFT_MULTIPLICATIVE_IDENTITY());
}

BOOST_AUTO_TEST_CASE(Fe2Dbl) {
    Fe2 a({820418911954903445, -717081021288996571});
    Fe2 b({1640837823909806890, -1434162042577993142});
    BOOST_TEST(b == a.douple());
    BOOST_TEST(Fe2::LEFT_ADDITIVE_IDENTITY() == Fe2::LEFT_ADDITIVE_IDENTITY().douple());
}

BOOST_AUTO_TEST_CASE(Fe2Mul) {
    Fe2 a({-562956929497444169, -2169310818437621774});
    Zq b(51280928868087145);
    Fe2 c({-35430973369276012, 1547590517274652700});
    Fe2 d({-1508468004681921080, -1329327685600172110});
    BOOST_TEST(c == a * b);
    BOOST_TEST(d == a * c);
    BOOST_TEST(d == c * a);
    BOOST_TEST(Fe2::LEFT_ADDITIVE_IDENTITY() == Fe2::LEFT_ADDITIVE_IDENTITY() * c);
    BOOST_TEST(Fe2::LEFT_ADDITIVE_IDENTITY() == c * Fe2::LEFT_ADDITIVE_IDENTITY());
    BOOST_TEST(c == c * Fe2::LEFT_MULTIPLICATIVE_IDENTITY());
    BOOST_TEST(c == Fe2::LEFT_MULTIPLICATIVE_IDENTITY() * c);
}

BOOST_AUTO_TEST_CASE(Fe2Sub) {
    Fe2 a({-1967505154088359060, -417234341653690044});
    Fe2 b({-1501942569190230732, -1831258648329169020});
    Fe2 c({-465562584898128328, 1414024306675478976});
    BOOST_TEST(c == a - b);
    BOOST_TEST(c == c - Fe2::LEFT_ADDITIVE_IDENTITY());
    BOOST_TEST(Fe2::LEFT_ADDITIVE_IDENTITY() == Fe2::LEFT_ADDITIVE_IDENTITY() - Fe2::LEFT_ADDITIVE_IDENTITY());
    BOOST_TEST(Fe2::LEFT_ADDITIVE_IDENTITY() == Fe2::LEFT_MULTIPLICATIVE_IDENTITY() - Fe2::LEFT_MULTIPLICATIVE_IDENTITY());
}

BOOST_AUTO_TEST_CASE(Fe2Neg) {
    Fe2 a({-24524642669889579, -1380622575203430167});
    Fe2 b({24524642669889579, 1380622575203430167});
    Fe2 c({31743392249145330, 21532112689806032});
    Fe2 d({-31743392249145330, -21532112689806032});
    BOOST_TEST(b == -a);
    BOOST_TEST(d == -c);
    BOOST_TEST(Fe2(0) == -Fe2(0));
    BOOST_TEST(Fe2(1) == -(-Fe2(1)));
}

BOOST_AUTO_TEST_CASE(Fe2Inv) {
    Fe2 a({-1625675455158885726, -1859114719801591181});
    Fe2 b({996956696683127176, 1357513270145678623});
    BOOST_TEST(a == b.invert().value());
    BOOST_TEST(b == a.invert().value());
    BOOST_TEST(!Fe2(0).invert());
}

BOOST_AUTO_TEST_CASE(Fe3Mul) {
    Fe3 a({1561713001434896052, 1989274817237533064, -172458044588081573});
    Fe3 b({-2100662521769163914, 1850812799403353007, -1397409432835151044});
    Fe3 c({1902737453720704421, 532565984705842277, -845465626277180172});
    BOOST_TEST(c == a * b);
    BOOST_TEST(c == b * a);
    BOOST_TEST(Fe3::LEFT_ADDITIVE_IDENTITY() == Fe3::LEFT_ADDITIVE_IDENTITY() * c);
    BOOST_TEST(Fe3::LEFT_ADDITIVE_IDENTITY() == c * Fe3::LEFT_ADDITIVE_IDENTITY());
    BOOST_TEST(c == c * Fe3::LEFT_MULTIPLICATIVE_IDENTITY());
    BOOST_TEST(c == Fe3::LEFT_MULTIPLICATIVE_IDENTITY() * c);
}

BOOST_AUTO_TEST_CASE(Fe3Inv) {
    Fe3 a({7211454687446044, -265865741570482748, 100983455732864657});
    Fe3 b({-2284945073332559179, 1917537703946719722, 2156939298993517014});
    BOOST_TEST(a == b.invert().value());
    BOOST_TEST(b == a.invert().value());
    BOOST_TEST(!Fe3(0).invert());
}

BOOST_AUTO_TEST_CASE(Fe4Mul) {
    Fe4 a({1561713001434896052, 1989274817237533064, -172458044588081573, -567417154093050961});
    Fe4 b({-2100662521769163914, 1850812799403353007, -1397409432835151044, -185428177588484336});
    Fe4 c({873942338409168043, 1148202790106095708, -692872878060617743, -1287171804490455896});
    BOOST_TEST(c == a * b);
    BOOST_TEST(c == b * a);
    BOOST_TEST(Fe4::LEFT_ADDITIVE_IDENTITY() == Fe4::LEFT_ADDITIVE_IDENTITY() * c);
    BOOST_TEST(Fe4::LEFT_ADDITIVE_IDENTITY() == c * Fe4::LEFT_ADDITIVE_IDENTITY());
    BOOST_TEST(c == c * Fe4::LEFT_MULTIPLICATIVE_IDENTITY());
    BOOST_TEST(c == Fe4::LEFT_MULTIPLICATIVE_IDENTITY() * c);
}

BOOST_AUTO_TEST_CASE(Fe4Inv) {
    Fe4 a({-1017419705183165652, -1799869274564129152, -126611616612175199, -2071996840444225737});
    Fe4 b({-1379082413140057964, 1769654499290160158, 1827966548427094711, -826658649562982442});
    BOOST_TEST(a == b.invert().value());
    BOOST_TEST(b == a.invert().value());
    BOOST_TEST(!Fe4(0).invert());
}

BOOST_AUTO_TEST_CASE_TEMPLATE(RqMul, R, Rs) {
    R a({
        410437789116954478, -1676778755095754740, 1304910036079455070, -2180203290583769858,
        -1495296988607122925, 1948947331348098517, -1084699818075393292, 1044020957961680425,
        -2080535877479113688, -1036911584879322540, 1572816335323668802, 1932009193850584724,
        -1386583938544539133, -644820177932815837, 1101953057417930761, 171707964015087193,
        -1944038029179376481, -465436936287011198, -516450095318761929, -881212298998478039,
        -1738804357252221071, 1120957872868048497, -1930675024432950314, -2153073127331145514,
        2217943117974314657, -1713684824524849390, -703571646284820893, -694523122608020996,
        -554626694724313203, -879894003729967561, 317293271957240720, -675921629680094264,
        997721604615416372, 273820255587157231, 975338292104925240, -2253230974437305075,
        -1057939913929415045, -317158679571736316, -101655125700989216, 750383619103514149,
        722229620947350345, -748958667577617923, 1300805387746352458, 421746524323923526,
        -1808132177860103035, 637979529009305437, 972813258460186427, 2184072568167778551,
        88394777432122473, 949643627746832254, 1602953717291047005, 611226803548971056,
        -361268864379693816, 2168357695254233684, 1246629813343569915, 554786442894013878,
        -433914948304289654, 179906103568758809, -1098790141850605651, -1865610605115533803,
        -1480677970813178636, 1623228436308113124, 1629656009255161740, -1753007079681864669,
    });
    R b({
        1487160973258459730, -2019687548643341919, 93691119341880812, -403435653774393872,
        823295982216865802, -724163042606603790, 1995358334042342582, 1842167745467068791,
        -1846191567863959408, 1802762312757080282, -812457394330850925, -1590227710980705291,
        885152883534501308, 1852774117241516401, 1972810355988163410, 1671647614474767030,
        -1048984450359656504, -341312693123704606, 1199449221808485926, -714038743521924082,
        946472245313874101, 438572532558364794, 1948623560483102238, 270400026996983496,
        -251053459545021136, 1762395943771465800, 1014909202480582596, 1192914808908846132,
        1233984738830635332, 1999374316486968402, -1245046271851476832, 1403537640398268517,
        2149244811901530783, 1076409736990480393, 1903722520238291389, -2216768452717495069,
        -2137369065746837689, -617825361837635719, 1797557720580303900, -1595896292709792507,
        302560353949110519, -515841967747681306, -1303279934342298356, -1436912156986106122,
        1486695271222014030, 1431891517506924519, 1299106513140113853, 915973100196648252,
        -2226687506195001922, -1056819748008424218, -176143939148503495, -580713317842490340,
        -2264213971813526643, -502195699807850232, -259036498455700489, 1203005122679581009,
        332706056010329464, 2159069607937548288, 571363055091370562, -1884649368007665260,
        586328151599882845, 462870684562088124, -2175130924433000659, -1506323057985068767,
    });
    R c({
        2266976007030306653, 1500830203284398904, 1479832651078426221, 2255861413851699359,
        1864423207523536395, -1201374320818936692, -2026943279301023765, -1031294490077568860,
        -1227646841676196559, 338672929552917533, 267773429929088758, -815366684101668908,
        2034596327610436650, -137702135501460930, 997192383187717262, 1093828416622748360,
        -2017099528178156026, 789070921961386443, 344278487537250042, -925288041451478769,
        2045167679691336721, 1186185946888149268, -795907610857717374, -1814882712245720686,
        -1020148005884021260, -319203494899808856, -815282799045391370, -1334137646906815606,
        594605695402935519, 1270695618444986094, 1579905283095086331, 637977853715863743,
        1864179149908908724, 1950516475177295100, 214893288150943579, 2300036058514110144,
        -526689777724012038, 328629100991928891, 740430724717439213, -1612679436910100435,
        -630068944352195065, -2267959962516917754, -2053410788269626235, -45252062411050752,
        1616508909543698256, 4382335715501189, 1822219765582864419, 1274084218652690374,
        -1671765218199808370, -2134076266095166448, 1033910624997091926, 322128563690119885,
        656050450973715518, 1691301783940383814, 1939845874507296798, 1019821937282182061,
        1841965358235575664, -1067477060459547353, -1725842994046559310, -1633724049578461675,
        975734512757218950, -643150496825206295, -1972641525987835149, 536651684316704134,
    });
    BOOST_TEST(c == a * b);
    BOOST_TEST(c == b * a);
    BOOST_TEST(c == R::LEFT_MULTIPLICATIVE_IDENTITY() * c);
    BOOST_TEST(R::LEFT_ADDITIVE_IDENTITY() == c * Zq(0));
}

BOOST_AUTO_TEST_CASE_TEMPLATE(RqInfinityNorm, R, Rs) {
    R a({ -677133638855483916, 6, 5, 4, 3, 2, 1, });
    R b({ 1140329745848183219, 6, 5, 4, 3, 2, 1, });
    int64_t ab = 677133638855483916;
    int64_t ag = 677133638855483917;
    int64_t bb = 1140329745848183219;
    int64_t bg = 1140329745848183220;
    BOOST_TEST(!a.checkInfinityNorm(ab));
    BOOST_TEST(a.checkInfinityNorm(ag));
    BOOST_TEST(!b.checkInfinityNorm(bb));
    BOOST_TEST(b.checkInfinityNorm(bg));
}

BOOST_AUTO_TEST_SUITE_END()
