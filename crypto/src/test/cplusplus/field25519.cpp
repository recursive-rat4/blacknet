/*
 * Copyright (c) 2024-2025 Pavel Vasin
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#include <boost/test/unit_test.hpp>

#include "field25519.h"

using namespace blacknet::crypto;

BOOST_AUTO_TEST_SUITE(Field25519s)

BOOST_AUTO_TEST_CASE(fieldAdd) {
    constexpr Field25519 a("22BFBE818DD7D8205D034DA6AE4E081ABB4914FB9D324D40E09EFBDF8E025DCE");
    constexpr Field25519 b("0B4C5CDCFACDB4BECFBF827D8143E65BC7C9CB9FF3121A264A4EEFB69D26BE3D");
    constexpr Field25519 c("2E0C1B5E88A58CDF2CC2D0242F91EE768312E09B904467672AEDEB962B291C0B");
    BOOST_TEST(c == a + b);
    BOOST_TEST(c == Field25519(0) + c);
    BOOST_TEST(Field25519(1) == Field25519(1) + Field25519(0));
}

BOOST_AUTO_TEST_CASE(fieldMul) {
    constexpr Field25519 a("4CFC44A5ED3B23B2EE255AAB66FAEDFB6BEB462C92269E0EC2616D6CBD1A359D");
    constexpr Field25519 b("3CF69A2302FB516F08473812AFAA2A9837D72E85A03DD5D60B5A93B8B3FE84B6");
    constexpr Field25519 c("2D3960B5603F737CEC7C3B65CD2524FECD5A4961F4792DF842EF6ABADDD9A09B");
    BOOST_TEST(c == a * b);
    BOOST_TEST(Field25519(0) == Field25519(0) * c);
    BOOST_TEST(c == c * Field25519(1));
}

BOOST_AUTO_TEST_CASE(fieldSub) {
    constexpr Field25519 a("063C6FA6BC7FD187EE00659A73A97B1589892A4AE753FE00C7B3764DDD663CD2");
    constexpr Field25519 b("20AC2A42B38F940E1D6D81E7B258588C04AEE2F11A782E579033601A00DF0730");
    constexpr Field25519 c("6590456408F03D79D092E3B2C151228984DA4759CCDBCFA937801633DC87358F");
    constexpr Field25519 d("1A6FBA9BF70FC2862F6D1C4D3EAEDD767B25B8A633243056C87FE9CC2378CA5E");
    BOOST_TEST(c == a - b);
    BOOST_TEST(d == b - a);
    BOOST_TEST(c == c - Field25519(0));
    BOOST_TEST(Field25519(0) == Field25519(1) - Field25519(1));
}

BOOST_AUTO_TEST_CASE(fieldDiv) {
    constexpr Field25519 a("3FACED132F5641F57B1162D06ED827D8CA9FA69F0C7B14822818EEF4DB6F6FDC");
    constexpr Field25519 b("152D43A9A19991AA7F8C98ED185A79EDA9B2562E4C456BB554C0C0D4D0362904");
    constexpr Field25519 c("58C4824D139DC383C143CBB9CC8329AEFEE44752E3B33771AD362FE03ACF52A8");
    BOOST_TEST(c == a / b);
    BOOST_TEST(Field25519(0) == Field25519(0) / c);
    BOOST_CHECK_THROW(c / Field25519(0), ArithmeticException);
    BOOST_TEST(Field25519(1) == Field25519(1) / Field25519(1));
    BOOST_TEST(c == c / Field25519(1));
}

BOOST_AUTO_TEST_CASE(fieldNeg) {
    constexpr Field25519 a("12610BC44A0BBC319A91FC24E99A98EF2BD29A2B535BBD1A74BC100A698E34FA");
    constexpr Field25519 b("6D9EF43BB5F443CE656E03DB16656710D42D65D4ACA442E58B43EFF59671CAF3");
    BOOST_TEST(b == -a);
    BOOST_TEST(Field25519(0) == -Field25519(0));
    BOOST_TEST(Field25519(1) == -(-Field25519(1)));
    BOOST_TEST(Field25519(1) == -Field25519(-1));
}

BOOST_AUTO_TEST_CASE(fieldSquare) {
    constexpr Field25519 a("38938AB74D9B6E57EB0DF50C3E9EF34F283948072D011E24A3F27F73A68CC0DB");
    constexpr Field25519 b("6BF8A5C2B6D265BF399F5BB05C70E62E9DFB403BE7548DB98E1DA13BD6EDC9D9");
    BOOST_TEST(b == a.square());
    BOOST_TEST(Field25519(0) == Field25519(0).square());
    BOOST_TEST(Field25519(1) == Field25519(1).square());
}

BOOST_AUTO_TEST_CASE(fieldInv) {
    constexpr Field25519 a("0F34FE2FD15703DC7EBA4A68D48FA9EE0E9AB8746F759EB8FC23828A4AA48900");
    constexpr Field25519 b("16CEA88227C9F5A181A5C35996A1DB400D53A6D5B42E33B3CA0CCA7E7C8E27B7");
    BOOST_TEST(a == b.invert().value());
    BOOST_TEST(b == a.invert().value());
    BOOST_TEST(!Field25519(0).invert());
}

BOOST_AUTO_TEST_CASE(fieldSqrt) {
    constexpr Field25519 a("35AEB661A5F2E7DF341A8F256036C025E07B8E45002F7D9DA0C8F7B5AA744AEA");
    constexpr Field25519 b("39FCE7DBF35569B5DC603860E3254BF9E61E3B57BA958A05A121B318906FE126");
    constexpr Field25519 c("79156B03BBC3A8D6F813174DB1FFC94F6BFB51566EB48E2E74129E86BEA579A6");
    BOOST_TEST(c == *a.sqrt());
    BOOST_TEST(!b.sqrt());
    BOOST_TEST(Field25519(0) == *Field25519(0).sqrt());
    BOOST_TEST(Field25519(1) == *Field25519(1).sqrt());
}

BOOST_AUTO_TEST_SUITE_END()
