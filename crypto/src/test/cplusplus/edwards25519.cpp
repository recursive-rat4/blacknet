/*
 * Copyright (c) 2024-2025 Pavel Vasin
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#include <boost/test/unit_test.hpp>

#include "edwards25519.h"

using namespace blacknet::crypto;

BOOST_AUTO_TEST_SUITE(Field25519s)

BOOST_AUTO_TEST_CASE(fieldAdd) {
    constexpr Field25519 a("22BFBE818DD7D8205D034DA6AE4E081ABB4914FB9D324D40E09EFBDF8E025DCE");
    constexpr Field25519 b("0B4C5CDCFACDB4BECFBF827D8143E65BC7C9CB9FF3121A264A4EEFB69D26BE3D");
    constexpr Field25519 c("2E0C1B5E88A58CDF2CC2D0242F91EE768312E09B904467672AEDEB962B291C0B");
    BOOST_TEST(c == a + b);
    BOOST_TEST(c == Field25519(0) + c);
    BOOST_TEST(Field25519(1) == Field25519(1) + Field25519(0));
}

BOOST_AUTO_TEST_CASE(fieldMul) {
    constexpr Field25519 a("4CFC44A5ED3B23B2EE255AAB66FAEDFB6BEB462C92269E0EC2616D6CBD1A359D");
    constexpr Field25519 b("3CF69A2302FB516F08473812AFAA2A9837D72E85A03DD5D60B5A93B8B3FE84B6");
    constexpr Field25519 c("2D3960B5603F737CEC7C3B65CD2524FECD5A4961F4792DF842EF6ABADDD9A09B");
    BOOST_TEST(c == a * b);
    BOOST_TEST(Field25519(0) == Field25519(0) * c);
    BOOST_TEST(c == c * Field25519(1));
}

BOOST_AUTO_TEST_CASE(fieldSub) {
    constexpr Field25519 a("063C6FA6BC7FD187EE00659A73A97B1589892A4AE753FE00C7B3764DDD663CD2");
    constexpr Field25519 b("20AC2A42B38F940E1D6D81E7B258588C04AEE2F11A782E579033601A00DF0730");
    constexpr Field25519 c("6590456408F03D79D092E3B2C151228984DA4759CCDBCFA937801633DC87358F");
    constexpr Field25519 d("1A6FBA9BF70FC2862F6D1C4D3EAEDD767B25B8A633243056C87FE9CC2378CA5E");
    BOOST_TEST(c == a - b);
    BOOST_TEST(d == b - a);
    BOOST_TEST(c == c - Field25519(0));
    BOOST_TEST(Field25519(0) == Field25519(1) - Field25519(1));
}

BOOST_AUTO_TEST_CASE(fieldDiv) {
    constexpr Field25519 a("3FACED132F5641F57B1162D06ED827D8CA9FA69F0C7B14822818EEF4DB6F6FDC");
    constexpr Field25519 b("152D43A9A19991AA7F8C98ED185A79EDA9B2562E4C456BB554C0C0D4D0362904");
    constexpr Field25519 c("58C4824D139DC383C143CBB9CC8329AEFEE44752E3B33771AD362FE03ACF52A8");
    BOOST_TEST(c == a / b);
    BOOST_TEST(Field25519(0) == Field25519(0) / c);
    BOOST_CHECK_THROW(c / Field25519(0), ArithmeticException);
    BOOST_TEST(Field25519(1) == Field25519(1) / Field25519(1));
    BOOST_TEST(c == c / Field25519(1));
}

BOOST_AUTO_TEST_CASE(fieldNeg) {
    constexpr Field25519 a("12610BC44A0BBC319A91FC24E99A98EF2BD29A2B535BBD1A74BC100A698E34FA");
    constexpr Field25519 b("6D9EF43BB5F443CE656E03DB16656710D42D65D4ACA442E58B43EFF59671CAF3");
    BOOST_TEST(b == -a);
    BOOST_TEST(Field25519(0) == -Field25519(0));
    BOOST_TEST(Field25519(1) == -(-Field25519(1)));
    BOOST_TEST(Field25519(1) == -Field25519(-1));
}

BOOST_AUTO_TEST_CASE(fieldSquare) {
    constexpr Field25519 a("38938AB74D9B6E57EB0DF50C3E9EF34F283948072D011E24A3F27F73A68CC0DB");
    constexpr Field25519 b("6BF8A5C2B6D265BF399F5BB05C70E62E9DFB403BE7548DB98E1DA13BD6EDC9D9");
    BOOST_TEST(b == a.square());
    BOOST_TEST(Field25519(0) == Field25519(0).square());
    BOOST_TEST(Field25519(1) == Field25519(1).square());
}

BOOST_AUTO_TEST_CASE(fieldInv) {
    constexpr Field25519 a("0F34FE2FD15703DC7EBA4A68D48FA9EE0E9AB8746F759EB8FC23828A4AA48900");
    constexpr Field25519 b("16CEA88227C9F5A181A5C35996A1DB400D53A6D5B42E33B3CA0CCA7E7C8E27B7");
    BOOST_TEST(a == b.invert().value());
    BOOST_TEST(b == a.invert().value());
    BOOST_TEST(!Field25519(0).invert());
}

BOOST_AUTO_TEST_CASE(fieldSqrt) {
    constexpr Field25519 a("35AEB661A5F2E7DF341A8F256036C025E07B8E45002F7D9DA0C8F7B5AA744AEA");
    constexpr Field25519 b("39FCE7DBF35569B5DC603860E3254BF9E61E3B57BA958A05A121B318906FE126");
    constexpr Field25519 c("79156B03BBC3A8D6F813174DB1FFC94F6BFB51566EB48E2E74129E86BEA579A6");
    BOOST_TEST(c == *a.sqrt());
    BOOST_TEST(!b.sqrt());
    BOOST_TEST(Field25519(0) == *Field25519(0).sqrt());
    BOOST_TEST(Field25519(1) == *Field25519(1).sqrt());
}

BOOST_AUTO_TEST_CASE(groupNegAffine) {
    constexpr Field25519 ax("2C998F5CD6F89A5323244238DCB0E122F3C48B690D17895D64C622FE7B134873");
    constexpr Field25519 ay("3B94477B1521DE0931F76F6CEE88E34BC4E4B581F88D8EAE8616625EC8046C4F");
    constexpr Field25519 bx("536670A3290765ACDCDBBDC7234F1EDD0C3B7496F2E876A29B39DD0184ECB77A");
    constexpr Field25519 by("3B94477B1521DE0931F76F6CEE88E34BC4E4B581F88D8EAE8616625EC8046C4F");
    Edwards25519GroupAffine a(ax, ay);
    Edwards25519GroupAffine b(bx, by);
    BOOST_TEST(b == -a);
    BOOST_TEST(Edwards25519GroupAffine() == -Edwards25519GroupAffine());
}

BOOST_AUTO_TEST_CASE(groupSubAffine) {
    constexpr Field25519 ax("248949BF1E33E577C48DF9037C0FEDCE42EA070F91125CD796F49349A994794D");
    constexpr Field25519 ay("1736DB3E2DA93A423B2DC4E1A010CF1BAB40AF86FAE99E7ABAB19262E335E3FC");
    constexpr Field25519 bx("342CFACF5781EFBB03D6326015C9078AAC0FBC7E5F17D6AD71C9BD8D5BB0E41D");
    constexpr Field25519 by("3E124FEECFA34E7E6BE1773135B1F5BE7D66E4D22B33243361AF0179EC747917");
    constexpr Field25519 cx("329A08756FA031A978BDB2DC8CE0191B67A31A11061AB327DD6BB07FCA2B1637");
    constexpr Field25519 cy("1A67928E14B11CB3C91CD549C14AF67810F38F29163459EDC4FA31C85C8F2D10");
    constexpr Field25519 dx("124713CD5616381192FDB5BB7868ABA8A48952687874B05F8CA79FFECA50FCB9");
    constexpr Field25519 dy("1A0CF87C5FE58923F6C85DA6A9B0D0B812C34CE97CC8374F518D9B4E5B54904D");
    Edwards25519GroupAffine a(ax, ay);
    Edwards25519GroupAffine b(bx, by);
    Edwards25519GroupAffine c(cx, cy);
    Edwards25519GroupAffine d(dx, dy);
    BOOST_TEST(c == a - b);
    BOOST_TEST(c == -b + a);
    BOOST_TEST(Edwards25519GroupAffine() == d - d);
    BOOST_TEST(-c == Edwards25519GroupAffine() - c);
    BOOST_TEST(c == c - Edwards25519GroupAffine());
    BOOST_TEST(Edwards25519GroupAffine() == Edwards25519GroupAffine() - Edwards25519GroupAffine());
}

BOOST_AUTO_TEST_CASE(groupAddAffine) {
    constexpr Field25519 ax("1E3DBD8EF7121F586A32C8789BE6C1BD516EA0B7B5E00D356527F3B9137C7F13");
    constexpr Field25519 ay("10833664A42569382BCDF87CCF2D0423A5CDBF39666777496B1A17D1265138E7");
    constexpr Field25519 bx("172C422E616DC9017CB392143DCDB133E1071D8E87806CCD9B222D82665AAC69");
    constexpr Field25519 by("39C554667DD211EB35B90AD285D01819B184E5C2ED777BF10C4E7039E853D5F5");
    constexpr Field25519 cx("1CF5593AE7B4FD9F9AADB739818D5A3A027C5481D295567AC053E3EE711CF3D6");
    constexpr Field25519 cy("4734A155F67FF10F2371E91A5EF1C89E0A246AF9FE5F4C76B3EB72325335E3AF");
    constexpr Field25519 dx("3D3B0EA90D13082AA6862F0DAC1E211C286614F222BAFE7210862D448EF0E467");
    constexpr Field25519 dy("32AB5CACFE5225A4BF684AF87237E34A5A8F8FB4608AD5994F2A327A06513A42");
    constexpr Field25519 ex("75E985B20C0DF581F0941168FCE3006628E6F5086125A916031E11F4C1AC1533");
    constexpr Field25519 ey("62E44D27633DD1CB2386748EDE1BA66240A7F428F98B2BE674381AAE4699E851");
    constexpr Field25519 fx("0A167A4DF3F20A7E0F6BEE97031CFF99D7190AF79EDA56E9FCE1EE0B3E53EABA");
    constexpr Field25519 fy("62E44D27633DD1CB2386748EDE1BA66240A7F428F98B2BE674381AAE4699E851");
    Edwards25519GroupAffine a(ax, ay);
    Edwards25519GroupAffine b(bx, by);
    Edwards25519GroupAffine c(cx, cy);
    Edwards25519GroupAffine d(dx, dy);
    Edwards25519GroupAffine e(ex, ey);
    Edwards25519GroupAffine f(fx, fy);
    BOOST_TEST(c == a + b);
    BOOST_TEST(c == b + a);
    BOOST_TEST(e == d + d);
    BOOST_TEST(Edwards25519GroupAffine() == e + f);
    BOOST_TEST(c == Edwards25519GroupAffine() + c);
    BOOST_TEST(c == c + Edwards25519GroupAffine());
    BOOST_TEST(Edwards25519GroupAffine() == Edwards25519GroupAffine() + Edwards25519GroupAffine());
}

BOOST_AUTO_TEST_CASE(groupMulAffine) {
    constexpr Field25519 ax("3AED134ED42AD34F18DB7529FB0ED4470DBB0A157D676ECA74F7789208B87678");
    constexpr Field25519 ay("278B8C16CEFF8BD165602933BC9CA4E4365C38F3CE8D17519172D76B8B046621");
    constexpr Field25519 cx("24E994BFDF037A840793AC3321DBC483E081150B4C888FE8E6B77CBCCA117411");
    constexpr Field25519 cy("64967B5AA7773EB87585C0D81E755B917A6AF58EA2F20E6A12B47D98FB9929F4");
    constexpr BitInt<255> b("0E18DDB951F8A3A10C33028E6CD15A9B4480C3C825F515B6DA24B75E7C813623");
    constexpr BitInt<255> d("251D364ED569CBF14184665CE3FA321E9678002959E04609D1A0ECC692CEE9E1");
    constexpr Edwards25519GroupAffine a(ax, ay);
    constexpr Edwards25519GroupAffine c(cx, cy);
    BOOST_TEST(c == a * b);
    BOOST_TEST(a == a * UInt256(1));
    BOOST_TEST(Edwards25519GroupAffine() == a * UInt256(0));
    BOOST_TEST(Edwards25519GroupAffine() == Edwards25519GroupAffine() * d);
}

BOOST_AUTO_TEST_CASE(groupNegExtended) {
    constexpr Field25519 ax("2C998F5CD6F89A5323244238DCB0E122F3C48B690D17895D64C622FE7B134873");
    constexpr Field25519 ay("3B94477B1521DE0931F76F6CEE88E34BC4E4B581F88D8EAE8616625EC8046C4F");
    constexpr Field25519 bx("536670A3290765ACDCDBBDC7234F1EDD0C3B7496F2E876A29B39DD0184ECB77A");
    constexpr Field25519 by("3B94477B1521DE0931F76F6CEE88E34BC4E4B581F88D8EAE8616625EC8046C4F");
    Edwards25519GroupExtended a(ax, ay);
    Edwards25519GroupExtended b(bx, by);
    BOOST_TEST(b == -a);
    BOOST_TEST(Edwards25519GroupExtended() == -Edwards25519GroupExtended());
}

BOOST_AUTO_TEST_CASE(groupSubExtended) {
    constexpr Field25519 ax("248949BF1E33E577C48DF9037C0FEDCE42EA070F91125CD796F49349A994794D");
    constexpr Field25519 ay("1736DB3E2DA93A423B2DC4E1A010CF1BAB40AF86FAE99E7ABAB19262E335E3FC");
    constexpr Field25519 bx("342CFACF5781EFBB03D6326015C9078AAC0FBC7E5F17D6AD71C9BD8D5BB0E41D");
    constexpr Field25519 by("3E124FEECFA34E7E6BE1773135B1F5BE7D66E4D22B33243361AF0179EC747917");
    constexpr Field25519 cx("329A08756FA031A978BDB2DC8CE0191B67A31A11061AB327DD6BB07FCA2B1637");
    constexpr Field25519 cy("1A67928E14B11CB3C91CD549C14AF67810F38F29163459EDC4FA31C85C8F2D10");
    constexpr Field25519 dx("124713CD5616381192FDB5BB7868ABA8A48952687874B05F8CA79FFECA50FCB9");
    constexpr Field25519 dy("1A0CF87C5FE58923F6C85DA6A9B0D0B812C34CE97CC8374F518D9B4E5B54904D");
    Edwards25519GroupExtended a(ax, ay);
    Edwards25519GroupExtended b(bx, by);
    Edwards25519GroupExtended c(cx, cy);
    Edwards25519GroupExtended d(dx, dy);
    BOOST_TEST(c == a - b);
    BOOST_TEST(c == -b + a);
    BOOST_TEST(Edwards25519GroupExtended() == d - d);
    BOOST_TEST(-c == Edwards25519GroupExtended() - c);
    BOOST_TEST(c == c - Edwards25519GroupExtended());
    BOOST_TEST(Edwards25519GroupExtended() == Edwards25519GroupExtended() - Edwards25519GroupExtended());
}

BOOST_AUTO_TEST_CASE(groupAddExtended) {
    constexpr Field25519 ax("1E3DBD8EF7121F586A32C8789BE6C1BD516EA0B7B5E00D356527F3B9137C7F13");
    constexpr Field25519 ay("10833664A42569382BCDF87CCF2D0423A5CDBF39666777496B1A17D1265138E7");
    constexpr Field25519 bx("172C422E616DC9017CB392143DCDB133E1071D8E87806CCD9B222D82665AAC69");
    constexpr Field25519 by("39C554667DD211EB35B90AD285D01819B184E5C2ED777BF10C4E7039E853D5F5");
    constexpr Field25519 cx("1CF5593AE7B4FD9F9AADB739818D5A3A027C5481D295567AC053E3EE711CF3D6");
    constexpr Field25519 cy("4734A155F67FF10F2371E91A5EF1C89E0A246AF9FE5F4C76B3EB72325335E3AF");
    constexpr Field25519 dx("3D3B0EA90D13082AA6862F0DAC1E211C286614F222BAFE7210862D448EF0E467");
    constexpr Field25519 dy("32AB5CACFE5225A4BF684AF87237E34A5A8F8FB4608AD5994F2A327A06513A42");
    constexpr Field25519 ex("75E985B20C0DF581F0941168FCE3006628E6F5086125A916031E11F4C1AC1533");
    constexpr Field25519 ey("62E44D27633DD1CB2386748EDE1BA66240A7F428F98B2BE674381AAE4699E851");
    constexpr Field25519 fx("0A167A4DF3F20A7E0F6BEE97031CFF99D7190AF79EDA56E9FCE1EE0B3E53EABA");
    constexpr Field25519 fy("62E44D27633DD1CB2386748EDE1BA66240A7F428F98B2BE674381AAE4699E851");
    Edwards25519GroupExtended a(ax, ay);
    Edwards25519GroupExtended b(bx, by);
    Edwards25519GroupExtended c(cx, cy);
    Edwards25519GroupExtended d(dx, dy);
    Edwards25519GroupExtended e(ex, ey);
    Edwards25519GroupExtended f(fx, fy);
    BOOST_TEST(c == a + b);
    BOOST_TEST(c == b + a);
    BOOST_TEST(e == d + d);
    BOOST_TEST(Edwards25519GroupExtended() == e + f);
    BOOST_TEST(c == Edwards25519GroupExtended() + c);
    BOOST_TEST(c == c + Edwards25519GroupExtended());
    BOOST_TEST(Edwards25519GroupExtended() == Edwards25519GroupExtended() + Edwards25519GroupExtended());
}

BOOST_AUTO_TEST_CASE(groupMulExtended) {
    constexpr Field25519 ax("3AED134ED42AD34F18DB7529FB0ED4470DBB0A157D676ECA74F7789208B87678");
    constexpr Field25519 ay("278B8C16CEFF8BD165602933BC9CA4E4365C38F3CE8D17519172D76B8B046621");
    constexpr Field25519 cx("24E994BFDF037A840793AC3321DBC483E081150B4C888FE8E6B77CBCCA117411");
    constexpr Field25519 cy("64967B5AA7773EB87585C0D81E755B917A6AF58EA2F20E6A12B47D98FB9929F4");
    constexpr BitInt<255> b("0E18DDB951F8A3A10C33028E6CD15A9B4480C3C825F515B6DA24B75E7C813623");
    constexpr BitInt<255> d("251D364ED569CBF14184665CE3FA321E9678002959E04609D1A0ECC692CEE9E1");
    constexpr Edwards25519GroupExtended a(ax, ay);
    constexpr Edwards25519GroupExtended c(cx, cy);
    BOOST_TEST(c == a * b);
    BOOST_TEST(a == a * UInt256(1));
    BOOST_TEST(Edwards25519GroupExtended() == a * UInt256(0));
    BOOST_TEST(Edwards25519GroupExtended() == Edwards25519GroupExtended() * d);
}

BOOST_AUTO_TEST_SUITE_END()
