/*
 * Copyright (c) 2025 Pavel Vasin
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#include <boost/test/unit_test.hpp>
#include <cstddef>
#include <array>

#include "byte.h"
#include "chacha20.h"
#include "util.h"

namespace byte = blacknet::compat::byte;
using namespace blacknet::crypto;

BOOST_AUTO_TEST_SUITE(ChaCha20s)

BOOST_AUTO_TEST_CASE(RFC8439) {
    const auto key = byte::arrayU<32>({
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
    });
    const auto iv = byte::arrayU<12>({
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x00
    });
    const auto decrypted = byte::arrayU<114>({
        0x4C, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61,
        0x6E, 0x64, 0x20, 0x47, 0x65, 0x6E, 0x74, 0x6C,
        0x65, 0x6D, 0x65, 0x6E, 0x20, 0x6F, 0x66, 0x20,
        0x74, 0x68, 0x65, 0x20, 0x63, 0x6C, 0x61, 0x73,
        0x73, 0x20, 0x6F, 0x66, 0x20, 0x27, 0x39, 0x39,
        0x3A, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63,
        0x6F, 0x75, 0x6C, 0x64, 0x20, 0x6F, 0x66, 0x66,
        0x65, 0x72, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x6F,
        0x6E, 0x6C, 0x79, 0x20, 0x6F, 0x6E, 0x65, 0x20,
        0x74, 0x69, 0x70, 0x20, 0x66, 0x6F, 0x72, 0x20,
        0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75,
        0x72, 0x65, 0x2C, 0x20, 0x73, 0x75, 0x6E, 0x73,
        0x63, 0x72, 0x65, 0x65, 0x6E, 0x20, 0x77, 0x6F,
        0x75, 0x6C, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
        0x74, 0x2E
    });
    const auto encrypted = byte::arrayU<114>({
        0x6E, 0x2E, 0x35, 0x9A, 0x25, 0x68, 0xF9, 0x80,
        0x41, 0xBA, 0x07, 0x28, 0xDD, 0x0D, 0x69, 0x81,
        0xE9, 0x7E, 0x7A, 0xEC, 0x1D, 0x43, 0x60, 0xC2,
        0x0A, 0x27, 0xAF, 0xCC, 0xFD, 0x9F, 0xAE, 0x0B,
        0xF9, 0x1B, 0x65, 0xC5, 0x52, 0x47, 0x33, 0xAB,
        0x8F, 0x59, 0x3D, 0xAB, 0xCD, 0x62, 0xB3, 0x57,
        0x16, 0x39, 0xD6, 0x24, 0xE6, 0x51, 0x52, 0xAB,
        0x8F, 0x53, 0x0C, 0x35, 0x9F, 0x08, 0x61, 0xD8,
        0x07, 0xCA, 0x0D, 0xBF, 0x50, 0x0D, 0x6A, 0x61,
        0x56, 0xA3, 0x8E, 0x08, 0x8A, 0x22, 0xB6, 0x5E,
        0x52, 0xBC, 0x51, 0x4D, 0x16, 0xCC, 0xF8, 0x06,
        0x81, 0x8C, 0xE9, 0x1A, 0xB7, 0x79, 0x37, 0x36,
        0x5A, 0xF9, 0x0B, 0xBF, 0x74, 0xA3, 0x5B, 0xE6,
        0xB4, 0x0B, 0x8E, 0xED, 0xF2, 0x78, 0x5E, 0x42,
        0x87, 0x4D
   });

    std::array<std::byte, 114> scratch;

    ChaCha20 cipher(key, iv);
    cipher.seek(1);
    cipher.decrypt(scratch, encrypted);
    BOOST_TEST(decrypted == scratch);

    cipher.seek(1);
    cipher.encrypt(scratch, decrypted);
    BOOST_TEST(encrypted == scratch);
}

BOOST_AUTO_TEST_CASE(Blacknet) {
    const auto key = byte::arrayU<32>({
        0x81, 0xC7, 0x98, 0xD1, 0xCF, 0xAD, 0xB4, 0x4D,
        0x9A, 0xD0, 0xF2, 0xD4, 0x12, 0x15, 0x26, 0xA8,
        0x20, 0x5C, 0xAE, 0x4C, 0x5F, 0x4A, 0xC6, 0x81,
        0x7C, 0x93, 0xE6, 0x2D, 0x5C, 0xF9, 0x2D, 0xFC,
    });
    const auto iv = byte::arrayU<12>({
        0x28, 0x2A, 0x8C, 0xC7, 0x44, 0x99, 0x12, 0xD8, 0x39, 0xF8, 0x6B, 0x3D,
    });
    const auto decrypted = byte::arrayU<32>({
        0xF7, 0xB7, 0xFE, 0xEC, 0xB8, 0x49, 0xA2, 0x7D,
        0x6A, 0xBA, 0xB0, 0xD4, 0x50, 0x54, 0xA6, 0xCA,
        0x88, 0xCA, 0xDA, 0x11, 0xFF, 0x3B, 0xBF, 0xE6,
        0x68, 0x69, 0x24, 0x8E, 0xF5, 0x56, 0xE5, 0xC3,
    });
    const auto encrypted = byte::arrayU<32>({
        0xEF, 0x9D, 0xD7, 0xB6, 0xDC, 0x19, 0x76, 0x80,
        0x77, 0xE7, 0xAC, 0x4E, 0xD5, 0x3C, 0x04, 0x6D,
        0xA2, 0x7C, 0x64, 0xC5, 0x59, 0xC4, 0xAB, 0x9A,
        0x0A, 0xA9, 0xDE, 0xC9, 0x75, 0xA5, 0x0F, 0x66,
    });

    std::array<std::byte, 32> scratch;

    ChaCha20 cipher(key, iv);
    cipher.decrypt(scratch, encrypted);
    BOOST_TEST(decrypted == scratch);

    cipher.seek(0);
    cipher.encrypt(scratch, decrypted);
    BOOST_TEST(encrypted == scratch);
}

BOOST_AUTO_TEST_SUITE_END()
