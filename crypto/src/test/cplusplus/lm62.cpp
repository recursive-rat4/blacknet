/*
 * Copyright (c) 2024-2025 Pavel Vasin
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#include <boost/test/unit_test.hpp>
#include <tuple>

#include "lm62.h"
#include "lm62extension.h"

using namespace blacknet::crypto;

BOOST_AUTO_TEST_SUITE(LM62)

using Zq = LM62Ring;
using Fe2 = LM62RingDegree2;
using Fe3 = LM62RingDegree3;
using Fe4 = LM62RingDegree4;
using Rq = LM62RingDegree64;
using RqIso = LM62RingDegree64NTT;
using Rs = std::tuple<Rq, RqIso>;

BOOST_AUTO_TEST_CASE(ZqHex) {
    constexpr Zq a("396a250883366674");
    constexpr Zq b("123c53eebb61ea24");
    Zq c(0x396a250883366674);
    Zq d(0x123c53eebb61ea24);
    BOOST_TEST(c == a);
    BOOST_TEST(d == b);
}

BOOST_AUTO_TEST_CASE(ZqAdd) {
    Zq a(1152921504606846974);
    Zq b(1152921504606846970);
    Zq c(-594475150812905513);
    BOOST_TEST(c == a + b);
    BOOST_TEST(c == b + a);
    BOOST_TEST(c == Zq(0) + c);
    BOOST_TEST(c == c + Zq(0));
    BOOST_TEST(Zq(1) == Zq(1) + Zq(0));
    BOOST_TEST(Zq(1) == Zq(0) + Zq(1));
    BOOST_TEST(Zq(0) == Zq(-1) + Zq(1));
}

BOOST_AUTO_TEST_CASE(ZqDbl) {
    Zq a(-520487973610891110);
    Zq b(-1040975947221782220);
    BOOST_TEST(b == a.douple());
    BOOST_TEST(Zq(0) == Zq(0).douple());
}

BOOST_AUTO_TEST_CASE(ZqMul) {
    Zq a(1152102451225612864);
    Zq b(-32);
    Zq c(836857641126181293);
    BOOST_TEST(c == a * b);
    BOOST_TEST(c == b * a);
    BOOST_TEST(Zq(0) == Zq(0) * c);
    BOOST_TEST(Zq(0) == c * Zq(0));
    BOOST_TEST(c == c * Zq(1));
    BOOST_TEST(c == Zq(1) * c);
}

BOOST_AUTO_TEST_CASE(ZqSqr) {
    Zq a(801619525837393032);
    Zq b(639487481687624405);
    BOOST_TEST(b == a.square());
    BOOST_TEST(Zq(0) == Zq(0).square());
    BOOST_TEST(Zq(1) == Zq(1).square());
}

BOOST_AUTO_TEST_CASE(ZqSub) {
    Zq a(-2048);
    Zq b(65536);
    Zq c(-67584);
    Zq d(67584);
    BOOST_TEST(c == a - b);
    BOOST_TEST(d == b - a);
    BOOST_TEST(c == c - Zq(0));
    BOOST_TEST(Zq(0) == Zq(0) - Zq(0));
    BOOST_TEST(Zq(0) == Zq(1) - Zq(1));
}

BOOST_AUTO_TEST_CASE(ZqInv) {
    Zq a(24);
    Zq b(845926130007758175);
    Zq c(-25);
    Zq d(-812089084807447848);
    BOOST_TEST(a == b.invert().value());
    BOOST_TEST(b == a.invert().value());
    BOOST_TEST(c == d.invert().value());
    BOOST_TEST(d == c.invert().value());
    BOOST_TEST(!Zq(0).invert());
}

BOOST_AUTO_TEST_CASE(ZqNeg) {
    Zq a(231554163087019135);
    Zq b(-231554163087019135);
    Zq c(-991508920070012190);
    Zq d(991508920070012190);
    BOOST_TEST(b == -a);
    BOOST_TEST(d == -c);
    BOOST_TEST(Zq(0) == -Zq(0));
    BOOST_TEST(Zq(1) == -(-Zq(1)));
}

BOOST_AUTO_TEST_CASE(Fe2Add) {
    Fe2 a({791265566874146615, -157309583225685341});
    Fe2 b({-400984079045494161, 603774807708266410});
    Fe2 c({390281487828652454, 446465224482581069});
    BOOST_TEST(c == a + b);
    BOOST_TEST(c == b + a);
    BOOST_TEST(c == Fe2::additive_identity() + c);
    BOOST_TEST(c == c + Fe2::additive_identity());
    BOOST_TEST(Fe2::multiplicative_identity() == Fe2::multiplicative_identity() + Fe2::additive_identity());
    BOOST_TEST(Fe2::multiplicative_identity() == Fe2::additive_identity() + Fe2::multiplicative_identity());
}

BOOST_AUTO_TEST_CASE(Fe2Dbl) {
    Fe2 a({820418911954903445, -717081021288996571});
    Fe2 b({-1259480336116792567, -1434162042577993142});
    BOOST_TEST(b == a.douple());
    BOOST_TEST(Fe2::additive_identity() == Fe2::additive_identity().douple());
}

BOOST_AUTO_TEST_CASE(Fe2Mul) {
    Fe2 a({-562956929497444169, 731007341588977683});
    Zq b(51280928868087145);
    Fe2 c({900699017760187341, -1360447052970543142});
    Fe2 d({-58587273629299204, 42562224377421242});
    BOOST_TEST(c == a * b);
    BOOST_TEST(d == a * c);
    BOOST_TEST(d == c * a);
    BOOST_TEST(Fe2::additive_identity() == Fe2::additive_identity() * c);
    BOOST_TEST(Fe2::additive_identity() == c * Fe2::additive_identity());
    BOOST_TEST(c == c * Fe2::multiplicative_identity());
    BOOST_TEST(c == Fe2::multiplicative_identity() * c);
}

BOOST_AUTO_TEST_CASE(Fe2Sub) {
    Fe2 a({932813005938240397, -417234341653690044});
    Fe2 b({1398375590836368725, 1069059511697430437});
    Fe2 c({-465562584898128328, 1414024306675478976});
    BOOST_TEST(c == a - b);
    BOOST_TEST(c == c - Fe2::additive_identity());
    BOOST_TEST(Fe2::additive_identity() == Fe2::additive_identity() - Fe2::additive_identity());
    BOOST_TEST(Fe2::additive_identity() == Fe2::multiplicative_identity() - Fe2::multiplicative_identity());
}

BOOST_AUTO_TEST_CASE(Fe2Neg) {
    Fe2 a({-24524642669889579, -1380622575203430167});
    Fe2 b({24524642669889579, 1380622575203430167});
    Fe2 c({31743392249145330, 21532112689806032});
    Fe2 d({-31743392249145330, -21532112689806032});
    BOOST_TEST(b == -a);
    BOOST_TEST(d == -c);
    BOOST_TEST(Fe2(0) == -Fe2(0));
    BOOST_TEST(Fe2(1) == -(-Fe2(1)));
}

BOOST_AUTO_TEST_CASE(Fe2Inv) {
    Fe2 a({1274642704867713731, 1041203440225008276});
    Fe2 b({-1000843070266296594, -859899663395441682});
    BOOST_TEST(a == b.invert().value());
    BOOST_TEST(b == a.invert().value());
    BOOST_TEST(!Fe2(0).invert());
}

BOOST_AUTO_TEST_CASE(Fe3Mul) {
    Fe3 a({-1338605158591703405, -911043342789066393, -172458044588081573});
    Fe3 b({799655638257435543, -1049505360623246450, -1397409432835151044});
    Fe3 c({-965761769836649546, -1132998668749348595, 470547261007950790});
    BOOST_TEST(c == a * b);
    BOOST_TEST(c == b * a);
    BOOST_TEST(Fe3::additive_identity() == Fe3::additive_identity() * c);
    BOOST_TEST(Fe3::additive_identity() == c * Fe3::additive_identity());
    BOOST_TEST(c == c * Fe3::multiplicative_identity());
    BOOST_TEST(c == Fe3::multiplicative_identity() * c);
}

BOOST_AUTO_TEST_CASE(Fe3Inv) {
    Fe3 a({7211454687446044, -265865741570482748, 100983455732864657});
    Fe3 b({412814551040702843, -1380651098131164497, 1319266667370292099});
    BOOST_TEST(a == b.invert().value());
    BOOST_TEST(b == a.invert().value());
    BOOST_TEST(!Fe3(0).invert());
}

BOOST_AUTO_TEST_CASE(Fe4Mul) {
    Fe4 a({-1338605158591703405, -911043342789066393, -172458044588081573, -567417154093050961});
    Fe4 b({799655638257435543, -1049505360623246450, -1397409432835151044, -185428177588484336});
    Fe4 c({221440832807792239, 626824033577399788, -1242804179249225940, 389306472400849868});
    BOOST_TEST(c == a * b);
    BOOST_TEST(c == b * a);
    BOOST_TEST(Fe4::additive_identity() == Fe4::additive_identity() * c);
    BOOST_TEST(Fe4::additive_identity() == c * Fe4::additive_identity());
    BOOST_TEST(c == c * Fe4::multiplicative_identity());
    BOOST_TEST(c == Fe4::multiplicative_identity() * c);
}

BOOST_AUTO_TEST_CASE(Fe4Inv) {
    Fe4 a({-1017419705183165652, 1100448885462470305, -126611616612175199, 828321319582373720});
    Fe4 b({136753404699865366, 1095922811744431223, 803391210067376253, -85820763505257598});
    BOOST_TEST(a == b.invert().value());
    BOOST_TEST(b == a.invert().value());
    BOOST_TEST(!Fe4(0).invert());
}

BOOST_AUTO_TEST_CASE_TEMPLATE(RqMul, R, Rs) {
    R a({
        410437789116954478, 1223539404930844717, 1304910036079455070, 720114869442829599,
        1405021171419476532, -951370828678500940, -1084699818075393292, 1044020957961680425,
        819782282547485769, -1036911584879322540, -1327501824702930655, -968308966176014733,
        -1386583938544539133, -644820177932815837, 1101953057417930761, 171707964015087193,
        956280130847222976, -465436936287011198, -516450095318761929, -881212298998478039,
        1161513802774378386, 1120957872868048497, 969643135593649143, 747245032695453943,
        -682375042052284800, 1186633335501750067, -703571646284820893, -694523122608020996,
        -554626694724313203, -879894003729967561, 317293271957240720, -675921629680094264,
        997721604615416372, 273820255587157231, 975338292104925240, 647087185589294382,
        -1057939913929415045, -317158679571736316, -101655125700989216, 750383619103514149,
        722229620947350345, -748958667577617923, 1300805387746352458, 421746524323923526,
        1092185982166496422, 637979529009305437, 972813258460186427, -716245591858820906,
        88394777432122473, 949643627746832254, -1297364442735552452, 611226803548971056,
        -361268864379693816, -731960464772365773, 1246629813343569915, 554786442894013878,
        -433914948304289654, 179906103568758809, -1098790141850605651, 1034707554911065654,
        1419640189213420821, -1277089723718486333, -1270662150771437717, 1147311080344734788,
    });
    R b({
        -1413157186768139727, 880630611383257538, 93691119341880812, -403435653774393872,
        823295982216865802, -724163042606603790, -904959825984256875, -1058150414559530666,
        1054126592162640049, -1097555847269519175, -812457394330850925, 1310090449045894166,
        885152883534501308, -1047544042785083056, -927507804038436047, -1228670545551832427,
        -1048984450359656504, -341312693123704606, 1199449221808485926, -714038743521924082,
        946472245313874101, 438572532558364794, -951694599543497219, 270400026996983496,
        -251053459545021136, -1137922216255133657, 1014909202480582596, 1192914808908846132,
        1233984738830635332, -900943843539631055, -1245046271851476832, 1403537640398268517,
        -751073348125068674, 1076409736990480393, -996595639788308068, 683549707309104388,
        762949094279761768, -617825361837635719, -1102760439446295557, 1304421867316806950,
        302560353949110519, -515841967747681306, -1303279934342298356, -1436912156986106122,
        -1413622888804585427, 1431891517506924519, 1299106513140113853, 915973100196648252,
        673630653831597535, -1056819748008424218, -176143939148503495, -580713317842490340,
        636104188213072814, -502195699807850232, -259036498455700489, 1203005122679581009,
        332706056010329464, -741248552089051169, 571363055091370562, 1015668792018934197,
        586328151599882845, 462870684562088124, 725187235593598798, 1393995102041530690,
    });
    R c({
        25178841573537523, -843770882544733150, -425752254609585937, 429671014272142517,
        1087730047610957139, -517347756775519986, -1295029740250561956, -1178693107331379476,
        1210884945288324396, 433806645277322019, -104648221823292147, 126661724409613429,
        767956790301152647, 32551765934684875, 329464962841255067, -398083371454627905,
        1265136842758431149, 1347974032362351304, 207633366965648535, 1417725112838228248,
        1228922580427485553, -1230643132912935962, 557756121865379982, 32150315963181339,
        -287515344208735334, -797563099553268800, 1150590380707331981, -639804765202515109,
        -656024743535337309, -1381439137254596542, 1329784062807218357, -139774472774832854,
        202760634043580330, 287148007246648047, -605899808816547713, 1160423929404570810,
        102425444538151990, 606843601636541681, -1376908020968881960, 30468431601196100,
        -890593472487395548, 732716187350028594, 544258488056507424, 1394808036912117646,
        -1255450392461384645, -756955713159019217, 1101927487337494171, 29406012345920636,
        -676566539755869695, 21061452597437687, -1403961823227296852, -417892318406358814,
        1175238605672340696, 707637786685764115, 366832903413381779, 1365987078579363796,
        1303213717215661056, 956187283187423471, -875589876388638231, 1230287267312819673,
        -504171406143823943, -617389020513489109, -597177122832702244, 421741229954013038,
    });
    BOOST_TEST(c == a * b);
    BOOST_TEST(c == b * a);
    BOOST_TEST(c == R::multiplicative_identity() * c);
    BOOST_TEST(R::additive_identity() == c * Zq(0));
}

BOOST_AUTO_TEST_CASE_TEMPLATE(RqInfinityNorm, R, Rs) {
    R a({ -677133638855483916, 6, 5, 4, 3, 2, 1, });
    R b({ 1140329745848183219, 6, 5, 4, 3, 2, 1, });
    int64_t ab = 677133638855483916;
    int64_t ag = 677133638855483917;
    int64_t bb = 1140329745848183219;
    int64_t bg = 1140329745848183220;
    BOOST_TEST(!a.checkInfinityNorm(ab));
    BOOST_TEST(a.checkInfinityNorm(ag));
    BOOST_TEST(!b.checkInfinityNorm(bb));
    BOOST_TEST(b.checkInfinityNorm(bg));
}

BOOST_AUTO_TEST_CASE_TEMPLATE(RqConjugation, R, Rs) {
    R a({ 16, });
    R b({
        -633342152996292804, -1399487956742200553, -1420485508948173236, -644456746174900098,
        -1035894952503063062, -1201374320818936692, 873374880725575692, -1031294490077568860,
        -1227646841676196559, 338672929552917533, 267773429929088758, -815366684101668908,
        -865721832416162807, -137702135501460930, 997192383187717262, 1093828416622748360,
        883218631848443431, 789070921961386443, 344278487537250042, -925288041451478769,
        -855150480335262736, 1186185946888149268, -795907610857717374, 1085435447780878771,
        -1020148005884021260, -319203494899808856, -815282799045391370, -1334137646906815606,
        594605695402935519, 1270695618444986094, -1320412876931513126, 637977853715863743,
        -1036139010117690733, -949801684849304357, 214893288150943579, -600282101512489313,
        -526689777724012038, 328629100991928891, 740430724717439213, 1287638723116499022,
        -630068944352195065, 632358197509681703, 846907371756973222, -45252062411050752,
        -1283809250482901201, 4382335715501189, -1078098394443735038, 1274084218652690374,
        1228552941826791087, 766241893931433009, 1033910624997091926, 322128563690119885,
        656050450973715518, -1209016376086215643, -960472285519302659, 1019821937282182061,
        -1058352801791023793, -1067477060459547353, 1174475165980040147, 1266594110448137782,
        975734512757218950, -643150496825206295, 927676634038764308, 536651684316704134,
    });
    R c({
        -633342152996292804, -536651684316704134, -927676634038764308, 643150496825206295,
        -975734512757218950, -1266594110448137782, -1174475165980040147, 1067477060459547353,
        1058352801791023793, -1019821937282182061, 960472285519302659, 1209016376086215643,
        -656050450973715518, -322128563690119885, -1033910624997091926, -766241893931433009,
        -1228552941826791087, -1274084218652690374, 1078098394443735038, -4382335715501189,
        1283809250482901201, 45252062411050752, -846907371756973222, -632358197509681703,
        630068944352195065, -1287638723116499022, -740430724717439213, -328629100991928891,
        526689777724012038, 600282101512489313, -214893288150943579, 949801684849304357,
        1036139010117690733, -637977853715863743, 1320412876931513126, -1270695618444986094,
        -594605695402935519, 1334137646906815606, 815282799045391370, 319203494899808856,
        1020148005884021260, -1085435447780878771, 795907610857717374, -1186185946888149268,
        855150480335262736, 925288041451478769, -344278487537250042, -789070921961386443,
        -883218631848443431, -1093828416622748360, -997192383187717262, 137702135501460930,
        865721832416162807, 815366684101668908, -267773429929088758, -338672929552917533,
        1227646841676196559, 1031294490077568860, -873374880725575692, 1201374320818936692,
        1035894952503063062, 644456746174900098, 1420485508948173236, 1399487956742200553,
    });
    BOOST_TEST(a == a.conjugate());
    BOOST_TEST(c == b.conjugate());
}

BOOST_AUTO_TEST_SUITE_END()
