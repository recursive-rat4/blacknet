/*
 * Copyright (c) 2024 Pavel Vasin
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#include <boost/test/unit_test.hpp>

#include "kyber.h"

using namespace kyber;

BOOST_AUTO_TEST_SUITE(KyberCrystals)

BOOST_AUTO_TEST_CASE(ZqAdd) {
    Zq a(981);
    Zq b(-1516);
    Zq c(-535);
    BOOST_TEST(c == a + b);
    BOOST_TEST(c == b + a);
    BOOST_TEST(c == Zq(0) + c);
    BOOST_TEST(c == c + Zq(0));
    BOOST_TEST(Zq(1) == Zq(1) + Zq(0));
    BOOST_TEST(Zq(1) == Zq(0) + Zq(1));
}

BOOST_AUTO_TEST_CASE(ZqMul) {
    Zq a(-684);
    Zq b(-133);
    Zq c(1089);
    BOOST_TEST(c == a * b);
    BOOST_TEST(c == b * a);
    BOOST_TEST(Zq(0) == Zq(0) * c);
    BOOST_TEST(Zq(0) == c * Zq(0));
    BOOST_TEST(c == c * Zq(1));
    BOOST_TEST(c == Zq(1) * c);
}

BOOST_AUTO_TEST_CASE(ZqSub) {
    Zq a(-1045);
    Zq b(1553);
    Zq c(731);
    BOOST_TEST(c == a - b);
    BOOST_TEST(c == c - Zq(0));
    BOOST_TEST(Zq(0) == Zq(0) - Zq(0));
    BOOST_TEST(Zq(0) == Zq(1) - Zq(1));
}

BOOST_AUTO_TEST_CASE(RqAdd) {
    Rq a{
        -803, 480, 468, -1239, 1260, -441, 554, -620, -818, 1547, 1617, -1636,
        555, -761, -665, -1625, 273, 1328, 300, 425, -571, 1105, -173, -1607,
        -716, -742, 1605, 879, -324, -703, 808, 1196, 942, -909, -295, -1191,
        1348, -1513, -291, 1047, -871, 1120, 1274, 57, 727, 795, -1291, -1213,
        -552, -1119, 844, 614, -777, 1605, 369, -1512, 29, 1584, 433, -1123,
        1580, -191, -30, 1135, -1380, -979, -1533, -1215, 1255, 277, -283, 448,
        -471, 1381, 1176, 540, -197, 552, -914, 432, 258, -1224, -1596, -153,
        240, -729, 879, 670, -1554, -836, 1021, -181, 1456, -1663, -1231, 397,
        584, -428, -1596, 147, -888, 1650, 531, 390, -705, 1219, 225, -688,
        -668, -680, 1022, 197, -1453, -1132, -944, -558, 198, 399, -1031,
        -1433, 1261, 623, -96, -1400, -854, 526, -1259, -59, 527, -1207, -500,
        -259, 954, 878, -28, -920, -1296, 586, -746, -1239, -1112, -1259, 827,
        -137, 494, -1381, 275, -1122, 1579, -1536, -505, 209, -581, -8, -1194,
        -403, -65, 138, 1461, 267, -1301, -213, -1171, -1611, -69, -1539,
        -1373, -1569, -116, -1230, 1373, 248, -1134, -1424, 714, -1450, -1445,
        1568, 1609, 207, -1109, -1158, -287, 1158, 1521, -510, -1478, 1617,
        -146, 860, 1433, -1174, -14, -1293, -1327, -180, -1549, 1477, -28, 367,
        -47, 392, 282, 192, -381, 1299, 1135, -832, -108, 997, 1298, -1493,
        -348, -69, 896, 1014, -7, 1225, -7, -788, -507, 586, 332, 1210, 37,
        -350, 66, 162, -116, -1545, 618, -810, 1446, 796, 259, 804, -368,
        -1594, 248, -1115, -875, 391, 143, 1569, -426, -396, 106, -1338, 1401,
        875, -583, -1493, -892, 182, 1279, 276
    };
    Rq b{
        1279, 1600, -1337, 787, 29, 1551, -306, -1557, 1554, 728, -1128, 20,
        454, 1287, -526, -230, 502, -1384, -533, -26, 1627, -1364, 857, -31,
        -1469, 401, -1489, 84, 189, 1468, 1476, 1525, -539, 1161, -1053, 1499,
        -1419, -410, 734, 124, 1342, 1053, 1054, -404, 127, -1070, -922, -573,
        722, -994, 1436, 1471, 322, 818, -868, -1402, 126, 1624, -909, -609,
        1230, 320, -1058, 721, 518, -976, -1470, -888, -416, 488, 539, -373,
        516, -636, -1560, -873, -314, -615, 451, -786, 19, -1132, 750, -1014,
        -383, 1238, 1071, 589, -1352, 1295, 515, 1263, 1415, 318, 739, 1267,
        -1474, 601, 1456, 1171, 151, 1557, 1178, 1580, 642, -699, -1566, 600,
        1246, -1623, 882, -9, -355, 1318, 1228, -1460, 153, 883, 1012, -1174,
        241, 456, -538, 803, 606, 1652, 685, -1241, -802, 161, -381, -1210,
        730, -629, 1323, 1245, -1494, -12, 1513, 1322, 1177, -1274, 1354, 1077,
        -713, 1360, 1272, 1246, 890, 636, -1170, -282, 1410, -462, 1199, 411,
        -65, 664, -1627, -1379, -1316, 1338, 235, 1211, -933, 962, -836, 1410,
        1254, 1612, -1177, -1179, 68, -687, -732, -1238, -533, 651, 1252, -583,
        -1132, 899, 1367, -1459, 1067, -128, -1133, -1108, 1337, -1020, -704,
        1164, -1208, 525, 469, -1631, 752, 1540, -238, 224, -790, 203, 597,
        1161, -1240, 1264, 425, -1633, 1594, 212, -546, -1648, -514, 239,
        -1260, -921, -1644, 98, -257, -137, 822, 1039, 298, -1349, -16, 1257,
        484, 1203, 1192, -1512, 1375, -1357, 1362, 1058, 588, -1028, 248, 87,
        -63, -809, 249, 1197, 27, -926, -105, 239, -259, 460, 541, 607, -235,
        -815, -818, -1261, 638, 819
    };
    Rq c{
        476, -1249, -869, -452, 1289, 1110, 248, 1152, 736, -1054, 489, -1616,
        1009, 526, -1191, 1474, 775, -56, -233, 399, 1056, -259, 684, -1638,
        1144, -341, 116, 963, -135, 765, -1045, -608, 403, 252, -1348, 308,
        -71, 1406, 443, 1171, 471, -1156, -1001, -347, 854, -275, 1116, 1543,
        170, 1216, -1049, -1244, -455, -906, -499, 415, 155, -121, -476, 1597,
        -519, 129, -1088, -1473, -862, 1374, 326, 1226, 839, 765, 256, 75, 45,
        745, -384, -333, -511, -63, -463, -354, 277, 973, -846, -1167, -143,
        509, -1379, 1259, 423, 459, 1536, 1082, -458, -1345, -492, 1664, -890,
        173, -140, 1318, -737, -122, -1620, -1359, -63, 520, -1341, -88, 578,
        1026, -1425, 188, 1521, 186, 284, 1311, 351, 1282, -19, 722, 1502,
        1079, -634, -597, -248, -1151, -574, -1300, -275, -1046, -881, -1469,
        -1645, 249, 1295, 325, 539, 574, 767, 83, 65, 796, -1148, 940, -219,
        -21, 1547, 124, -860, -900, 1654, -73, 829, -470, 5, 8, -130, 802,
        -166, -1112, 712, 1125, -936, -400, -1002, -577, 1120, -159, 1138, 382,
        196, -931, -1066, 1218, -18, 641, 1351, -1110, -468, -376, 1088, -259,
        1080, -301, -741, -638, 718, 509, 1191, -160, 729, -10, -1222, -768,
        -858, 1518, -797, -312, -266, 591, -837, 595, 879, 1353, -1621, -766,
        1560, 864, 1486, 1209, 752, 188, -862, 170, -364, 93, -1651, 1323,
        -264, -925, 315, 1625, 630, -139, 21, 907, 550, 1365, 1076, 272, -1336,
        1162, -521, -1475, 847, -224, -120, -1507, 185, 1405, -626, 1588, 170,
        643, -531, -157, -153, -878, -1387, 1482, -818, 1021, 1619, -1079,
        -1412, 1095
    };
    BOOST_TEST(c == a + b);
    BOOST_TEST(c == b + a);
    BOOST_TEST(c == Rq::LEFT_ADDITIVE_IDENTITY() + c);
    BOOST_TEST(c == c + Rq::LEFT_ADDITIVE_IDENTITY());
}

BOOST_AUTO_TEST_CASE(RqMul) {
    Rq a{
        856, 1277, 1524, -1283, 209, 1063, -389, 1261, 184, 1295, -249, -586,
        -1650, 458, -1394, 1561, 1530, -679, -875, -1660, -453, -1259, 1523,
        1158, -1035, 942, -1469, 480, -147, -1497, -451, -1341, -323, -988,
        695, -1414, -1543, 1141, -1319, -1280, -1480, -761, 1125, -19, -935,
        -1653, -1262, -899, 1095, 312, -827, 1346, 684, 1040, 1653, 201, -647,
        1159, 180, -719, -1149, 302, 335, 1070, 498, -757, 804, -66, 516, 586,
        -73, 534, 362, -1489, -1492, 1384, -1643, 898, 966, -481, 840, 96,
        1265, -11, -253, -620, -775, -528, 728, -19, -988, 1290, -917, -1127,
        -1546, -848, -550, -853, 1286, 1426, -789, 282, 1456, -822, -715, 1020,
        1202, -1037, -1175, 162, 576, -9, -310, 905, -40, 517, -855, -49,
        -1288, -1510, 1285, -540, 733, 289, -804, -964, -936, -1209, -181,
        -1206, -908, 424, 1077, -690, -1075, 1105, -80, 60, 526, -1129, 1472,
        -1544, -68, 8, 1384, -1226, 1376, -601, 1337, 1663, -1486, -521, -696,
        -1004, -1592, -882, -1437, 1324, 42, 1175, 1392, 712, -1625, -779,
        1512, -259, -621, -1167, 1291, -915, -1295, 1384, -839, 290, 224, 1661,
        374, 699, -228, 1559, 1456, 523, -39, -80, 800, 355, 56, 1386, 139,
        1139, 285, -1093, 349, -770, 777, 1342, 1291, -11, 503, 863, 968,
        -1326, 1107, 1333, -1010, -1092, -1253, -756, 1611, -453, 203, -1169,
        -99, -1119, -1100, -109, -631, -672, 927, -808, -471, 179, -50, -1126,
        -1018, -294, -1257, -989, 526, 1181, 1149, -242, 442, 1099, 713, -747,
        1612, 1325, -342, 940, -1340, 514, -372, 697, 1032, 135, -1142, 907,
        1468, -1508, 720, -156, 1284, -162, 110, -597
    };
    Rq b{
        -470, 432, -1212, 204, 243, -15, 1320, 234, -1167, -745, 64, 191, -832,
        -1192, 1330, 675, -1645, -365, -813, 779, 1631, 1072, 135, -409, -423,
        143, 1368, 1388, 1436, -1402, -633, 344, -1299, -1622, -959, 1286,
        1101, -740, -857, 1374, 1596, -79, 866, -407, -969, -1634, 1258, 27,
        727, 309, 1494, 1299, 717, 302, -1612, -1341, -518, -1458, 916, -638,
        525, -76, 1428, -1276, 841, 1066, -1547, -1518, -1231, 69, -377, 1452,
        -235, 1183, -864, 1494, -966, -128, -444, 712, -2, -195, 53, 991, 425,
        -1257, 1578, -553, 737, 1044, 1476, 747, 776, -1275, 1129, 70, 615,
        -862, 1009, 319, -383, 322, 862, 1181, -1342, 221, 760, 1590, 702, 890,
        -1110, -540, -832, -530, -155, 1263, -91, 1435, 385, 6, 1320, 547,
        1615, -143, 1589, -1392, -1584, 1338, 431, 1091, 1568, 743, -401, 869,
        -186, 332, 900, 1493, -546, 1585, 600, 662, 20, -844, -178, -1658, 478,
        240, 257, -660, 1154, 783, -903, -46, 1224, 1599, 726, -717, 727,
        -1514, -818, -1607, -436, 1242, 514, -36, -1375, 1252, 1391, 858, 1042,
        1138, -398, 593, -34, 1108, -1485, 798, -212, -308, -1543, -841, 384,
        -162, 1325, 891, -829, -29, -765, -1635, -51, 911, 604, 507, 235, 601,
        -1077, 905, 141, 978, -235, 557, -1664, 1324, -770, -51, 1221, 830,
        679, -1015, -1279, -1179, 283, -1639, 803, 1532, 1011, -1587, 798,
        -833, -1016, -91, -1664, 1297, 1094, 471, 1152, 299, 120, 144, -996,
        692, -393, -1107, -1457, -139, -1588, -1291, -1642, -946, -1315, 1568,
        1189, 869, 1148, 1225, -1200, -1625, 70, 422, -704, -1199, 320, 1650,
        1178, 1340
    };
    Rq c{
        -101, 757, -882, 1374, -931, 1324, -1395, -767, -122, 60, -185, -323,
        642, 338, -361, -795, 285, 1095, -912, -592, -783, -106, -837, -984,
        -1501, -571, 692, -22, -1626, -5, -1125, -718, 726, 1444, 845, 1607,
        865, 1578, 1123, -17, 1291, 1538, 1579, 102, 617, -26, 1209, 1389, 397,
        -614, 1534, -152, 376, 442, 1128, 760, 1441, 1230, 1510, 320, -1228,
        -31, 1327, -1435, 881, 1423, -1236, 525, 390, -968, -307, 168, 1615,
        1135, -825, 9, -811, 115, 125, 872, 1009, -558, 1431, -1478, 1503,
        -705, -711, -27, 207, -1303, -1470, -658, 373, -265, -304, 1599, -1324,
        -1009, 549, -313, -1132, -1609, 384, -838, 1423, -959, 983, 718, -1136,
        -380, -746, -853, 134, -43, -376, 386, -584, 141, -450, -1544, 1214,
        471, 1536, 472, 1566, -766, 1103, -650, 901, -174, -1150, -937, 1074,
        1304, 1036, 1346, -147, -996, -1272, -818, -1376, 1627, -1349, -962,
        95, 576, 1540, 1403, -140, -109, -1154, 868, 925, 1073, -41, -1449,
        968, 1466, 1109, 383, -1416, -1662, 280, 1116, -470, 728, -1555, -827,
        347, 39, -962, -1373, -332, -1453, 123, 245, 1412, 72, 286, -546, 1069,
        -164, 1407, -691, 228, 165, -881, 758, 1159, 51, -1048, 50, 653, 167,
        451, 841, -332, -1296, -1347, -735, 407, 1618, -1048, 712, 1217, 785,
        -293, -1458, -1463, 1502, -662, -81, -840, 898, 184, 1575, -517, -567,
        404, 958, -1452, 523, -1663, 1600, 606, 127, -674, -442, 1540, -185,
        1618, 900, -3, -31, -498, 1551, -782, -1573, -112, 1299, 468, -282,
        379, 828, -1090, -398, -10, -1596, 775, -1424, -1212, -1034, 110, 162,
        -1403, 405
    };
    BOOST_TEST(c == a * b);
    BOOST_TEST(c == b * a);
    BOOST_TEST(c == c * Rq::LEFT_MULTIPLICATIVE_IDENTITY());
    BOOST_TEST(Rq::LEFT_ADDITIVE_IDENTITY() == c * Zq(0));
}

BOOST_AUTO_TEST_CASE(RqSub) {
    Rq a{
        619, 1411, -176, -1605, -93, -1049, 884, -616, -900, -71, -1420, -511,
        -44, 81, -1047, 378, -80, 940, 1123, -1447, -423, 105, 507, -593, -500,
        -91, -1643, 268, -466, -1610, 1583, -585, 1017, -261, -293, -1415,
        1069, 1519, 445, -693, 1187, 1121, 120, -1079, -462, -1356, -11, 1096,
        -483, 847, -1339, 462, 43, 1651, 1303, -1206, -649, -644, -975, -160,
        -968, -227, -868, -584, 1452, 7, 547, -271, 249, 1602, -489, 1371, 727,
        -1627, 1541, -621, -582, 618, 1481, -1233, -1648, 1422, -660, -1062,
        -666, 93, -1651, -1126, 170, -428, 535, -220, 884, 112, 1303, -1402,
        -1663, -146, 703, 234, -1345, -54, 1581, -1660, 845, -718, 1174, 804,
        1552, 42, -1000, -1232, -803, -927, 527, -652, -505, -430, 412, -53,
        -1209, -1073, -615, 1442, 1457, 1125, 315, 1198, 381, -1391, 382, 1387,
        -1366, -33, 1306, 212, -716, -305, -1153, 754, -612, 963, -462, -586,
        -716, -1450, 595, -753, 814, 1170, 1424, -506, 285, 594, -100, -931,
        -704, -872, 355, 195, 383, 1162, -191, -1628, -526, -543, 88, 776, 921,
        -1220, 199, -179, -1188, 334, 145, -235, -692, -409, -1232, 1432, 83,
        1464, -501, 731, -1452, 93, -843, -557, -510, 436, 668, 170, 1473, 48,
        -180, 767, -617, -395, 99, -284, 689, -1045, 27, -894, 1278, -989,
        -1540, 1160, 1064, -1110, -729, -748, -438, -1603, -491, 346, 821, 664,
        604, -583, 737, -838, -256, 1147, 1128, -1335, -1431, -475, 1273, 1294,
        1049, 1344, 126, -1096, 1463, 410, -954, 246, -63, 443, 1083, 1289,
        963, -1223, -1230, -1416, -419, -978, 1074, -416, -1610, 335, -1282,
        -931, 472, 81
    };
    Rq b{
        1537, -121, -445, -538, 771, 1444, -419, 375, -1234, 406, 508, 208,
        139, 1471, 150, 697, 1490, 1632, -1510, -806, 1249, -394, -603, -498,
        204, 678, 728, 1039, 226, 643, -392, 1392, 466, 938, -707, 1046, 245,
        -635, 1563, 797, 69, 271, 126, 707, 1065, 974, 1104, 951, -157, 1544,
        -1455, 161, 1264, -1043, -991, 1645, -211, 1104, -482, -1147, -813,
        -1658, -1405, -16, 820, 385, 121, -1349, 1078, -251, -99, -918, 1284,
        1247, -638, 1179, 1187, -1233, 807, 211, 1270, -478, 1257, 691, 3,
        1414, 1457, 566, 308, -1072, 1330, 1391, 469, 1416, 314, -972, 273,
        289, -1579, -1545, 928, 148, 1278, 878, 1345, -795, 1278, 103, -405,
        -1617, 219, 1564, -472, 502, -1356, -171, -478, -1182, 1645, -1468,
        -954, 605, 101, -118, 394, 482, 918, 53, -862, -765, -452, 815, 92,
        1525, 943, -613, 1314, -1582, -1096, 812, -749, 177, 210, -796, 1137,
        1188, -374, 1302, -254, -692, -302, 21, -1106, 1484, -1292, -1366,
        1405, -1613, -1156, 1111, 90, -854, 843, 1588, 933, 1648, 1302, -1082,
        -624, 1480, 1148, 849, -1404, 1208, -141, -1508, -476, 1480, 1551,
        -1574, -1353, 1223, 1228, -1068, 426, -1398, -743, 785, -257, -939,
        -868, 1356, -1110, -15, 110, 1630, -181, -117, 33, 1639, -769, 1176,
        -1296, 520, 946, -180, 1364, -389, 1236, -1501, 69, -1191, 1190, 955,
        -252, -399, 932, 1249, -690, 844, 916, 616, 1515, 1038, 1340, 735, 216,
        -1062, 655, 679, 518, -84, -577, 270, 1088, -74, 1023, 1256, 712,
        -1615, 885, 1344, -782, -1451, 1493, -1532, 971, 1605, -263, 50, 1630,
        99, 417, 1024, 80, 628
    };
    Rq c{
        -918, 1532, 269, -1067, -864, 836, 1303, -991, 334, -477, 1401, -719,
        -183, -1390, -1197, -319, -1570, -692, -696, -641, 1657, 499, 1110,
        -95, -704, -769, 958, -771, -692, 1076, -1354, 1352, 551, -1199, 414,
        868, 824, -1175, -1118, -1490, 1118, 850, -6, 1543, -1527, 999, -1115,
        145, -326, -697, 116, 301, -1221, -635, -1035, 478, -438, 1581, -493,
        987, -155, 1431, 537, -568, 632, -378, 426, 1078, -829, -1476, -390,
        -1040, -557, 455, -1150, 1529, 1560, -1478, 674, -1444, 411, -1429,
        1412, 1576, -669, -1321, 221, 1637, -138, 644, -795, -1611, 415, -1304,
        989, -430, 1393, -435, -1047, -1550, 1056, -202, 303, 791, -500, 77,
        -104, 701, -1372, 1659, -1219, 533, -331, -1429, -1446, -481, -27, 752,
        -1233, 1415, -255, 1651, -716, 1560, 1063, 643, -603, 1145, 1243, -626,
        834, 572, -1458, -1558, 363, 825, 1299, 1277, -57, -58, 137, 786, -672,
        210, 1476, 691, 969, 1274, 1068, -1467, -1603, -527, 1391, -890, 1192,
        435, 1220, 741, 1511, -916, 293, -1313, -1034, 113, -1459, 1138, -1214,
        -1471, 1545, 629, -949, -1028, 216, -874, 286, 1273, -216, 1440, 546,
        -323, 1436, 241, 1600, -1530, 1451, 1491, -100, -1342, -253, 1375,
        1536, -1186, -746, 63, -290, -863, -436, -278, 66, 1406, 1458, 1108,
        1323, -1414, 332, -809, 425, 1549, -172, 391, -798, 443, -1628, 771,
        -239, 745, -111, -585, 1294, -1427, -179, -1454, 1558, 109, -212, 1259,
        -1647, 587, 618, 615, 531, 1428, 703, -1366, 375, 484, 1352, -1010,
        -775, -1271, 198, -55, -1584, 228, 606, 116, -1390, 746, 1337, -466,
        89, 236, 1630, 1374, 392, -547
    };
    BOOST_TEST(c == a - b);
    BOOST_TEST(c == c - Rq::LEFT_ADDITIVE_IDENTITY());
    BOOST_TEST(Rq::LEFT_ADDITIVE_IDENTITY() == Rq::LEFT_ADDITIVE_IDENTITY() - Rq::LEFT_ADDITIVE_IDENTITY());
}

BOOST_AUTO_TEST_SUITE_END()
