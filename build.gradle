/*
 * Copyright (c) 2018-2020 Pavel Vasin
 *
 * Licensed under the Jelurida Public License version 1.1
 * for the Blacknet Public Blockchain Platform (the "License");
 * you may not use this file except in compliance with the License.
 * See the LICENSE.txt file at the top-level directory of this distribution.
 */

buildscript {
    ext.kotlin_version = '1.3.61'
    ext.coroutines_version = '1.3.3'
    ext.serialization_version = '0.14.0'
    ext.ktor_version = '1.3.1'

    repositories {
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r"
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.15.0"
}

apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'
apply plugin: 'application'

mainClassName = "ninja.blacknet.Main"

group 'ninja.blacknet'
version '0.2.6'

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    maven { url "https://dl.bintray.com/ethereum/maven" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "io.ktor:ktor-network:$ktor_version"
    implementation "io.ktor:ktor-server-cio:$ktor_version"
    implementation "io.ktor:ktor-websockets:$ktor_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-debug:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
    implementation "net.i2p.crypto:eddsa:0.3.0"
    implementation "com.rfksystems:blake2b:1.0.0"
    implementation "org.iq80.leveldb:leveldb:0.12"
    implementation "org.slf4j:slf4j-jdk14:1.7.30"
    implementation "io.github.microutils:kotlin-logging:1.7.8"
    implementation "org.briarproject:jtorctl:0.3"
    implementation "com.natpryce:konfig:1.6.10.0"
    implementation "com.google.guava:guava:28.2-jre"
    implementation "org.bitlet:weupnp:0.1.4"
    implementation "org.bouncycastle:bcprov-jdk15on:1.64"
    implementation "org.ethereum:leveldbjni-all:1.18.3"
    testImplementation "org.testng:testng:7.1.1"
}

distributions {
    main {
        contents {
            from { "LICENSE.txt" }
            from { "3RD-PARTY-LICENSES.txt" }
        }
    }
}

task dirtyDescribeGit {
    ext.output = {
        def git = org.eclipse.jgit.api.Git.open(buildDir.getParentFile())
        def describtion = git.describe().call()
        def status = git.status().call()
        if (status.hasUncommittedChanges())
            "$describtion-dirty"
        else
            describtion
    }
}

task createVersionTxt {
    dependsOn processResources
    dependsOn dirtyDescribeGit
    doLast {
        new File("$buildDir/resources/main/revision.txt").write(dirtyDescribeGit.output())
        new File("$buildDir/resources/main/version.txt").write(project.version.toString())
        new File("$buildDir/resources/main/ktor_version.txt").write("$ktor_version")
    }
}

tasks.withType(nl.javadude.gradle.plugins.license.DownloadLicenses).all {
    doFirst {
        Configuration[] konfigurations = configurations as Configuration[]
        configurations.create("xonfigurations").extendsFrom(konfigurations)
    }
    licenses = [
        "org.bitlet:weupnp:0.1.4" : downloadLicenses.license("GNU LESSER GENERAL PUBLIC LICENSE 2.1", "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html"),
        "org.bouncycastle:bcprov-jdk15on:1.64" : downloadLicenses.license("MIT License", "https://opensource.org/licenses/MIT"),
        "org.ethereum:leveldbjni-all:1.18.3" : downloadLicenses.license("BSD-3-clause", "https://opensource.org/licenses/BSD-3-Clause")
    ]
    dependencyConfiguration "xonfigurations"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += [
            "-Xinline-classes",
            "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"
    ]
}

classes {
    dependsOn createVersionTxt
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useTestNG()
}
